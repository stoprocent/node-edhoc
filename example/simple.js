"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("../dist/index");
const credentialManagerI = new index_1.DefaultEdhocCredentialManager();
const cryptoManagerI = new index_1.DefaultEdhocCryptoManager();
const credentialManagerR = new index_1.DefaultEdhocCredentialManager();
const cryptoManagerR = new index_1.DefaultEdhocCryptoManager();
const certificateI_p256 = new index_1.X509Credentials(Buffer.fromhex'), Buffer.from('362F54DA99298309F3EEBE8EE825849676BE5611EB10607852E59CC226C6260C', 'hex'));
const certificateR_p256 = new index_1.X509Credentials(Buffer.fromhex'), Buffer.from('AAB0A10807D6ABFCF5CFB0471287051625B1B83A5E73710A82EBF1B207346F0A', 'hex'));
const certificateI_ed25519 = new index_1.X509Credentials(Buffer.from('3081EE3081A1A0030201020204667FF93A300506032B6570301D311B301906035504030C124544484F4320526F6F742045643235353139301E170D3234303632393132303832365A170D3334303632393132303832365A30223120301E06035504030C174544484F4320496E69746961746F722045643235353139302A300506032B657003210058C305AD713B0A10BDECE572140FA93687C9DBEBAE62BD3E0189E6B7F0D35F7A300506032B6570034100309C2FB66A2D376A4035CBEAEA82C522A26E5BC06456605773F68589A1C82B747CFD81F700ED17AA882110C8BE5869A1BA9CAAE7504B66C0C26AB3E90074DE0B', 'hex'), Buffer.from('8F2EDD9ED9F85CCA8969F8F52FD472AF30B3569AC28F128CC58A0CF757D4B045', 'hex'));
const certificateR_ed25519 = new index_1.X509Credentials(Buffer.from('3081EE3081A1A0030201020204667FF91D300506032B6570301D311B301906035504030C124544484F4320526F6F742045643235353139301E170D3234303632393132303735375A170D3334303632393132303735375A30223120301E06035504030C174544484F4320526573706F6E6465722045643235353139302A300506032B6570032100DBDE1930BCF37BD250E6428ED0DBD4576CD3D85218670B41B4F23829019C97E2300506032B65700341009B18A65CA8349380C0A2A8C77FDE73032CB9EFA59E3FE074955734B680D70D5674129FC9958553958BC79DC8305B61C5AE20C4AF779D7100A85D56F3C6E3CC05', 'hex'), Buffer.from('71AF4886E38338CF67F32ACD33EDA917ABB17319E88170CBCE23C170EBF11E2B', 'hex'));
const rootCertificate_ed25519 = Buffer.from('3081E930819CA0030201020204667FF8FF300506032B6570301D311B301906035504030C124544484F4320526F6F742045643235353139301E170D3234303632393132303732375A170D3334303632393132303732375A301D311B301906035504030C124544484F4320526F6F742045643235353139302A300506032B65700321002EA53AD6614F14C9ED753180748EE79AC82F9037421D7C0FFD3AA9ABEFAB825D300506032B657003410076819B8EC170F576E983E4970AC1ADB27217CB76414D279742260AA3BF2906A0796DF07FC29C370A66864F6CFDE29A66015FD4D55B25F8E8DE4BACBD19AE400C', 'hex');
const rootCertificate_p256 = Buffer.from('3081E930819CA0030201020204667FF8FF300506032B6570301D311B301906035504030C124544484F4320526F6F742045643235353139301E170D3234303632393132303732375A170D3334303632393132303732375A301D311B301906035504030C124544484F4320526F6F742045643235353139302A300506032B65700321002EA53AD6614F14C9ED753180748EE79AC82F9037421D7C0FFD3AA9ABEFAB825D300506032B657003410076819B8EC170F576E983E4970AC1ADB27217CB76414D279742260AA3BF2906A0796DF07FC29C370A66864F6CFDE29A66015FD4D55B25F8E8DE4BACBD19AE400C', 'hex');
credentialManagerI.setCredentials(cryptoManagerI, certificateI_ed25519);
credentialManagerR.setCredentials(cryptoManagerR, certificateR_ed25519);
credentialManagerI.addTrustRoot(rootCertificate_ed25519);
credentialManagerR.addTrustRoot(rootCertificate_ed25519);
credentialManagerI.setCredentials(cryptoManagerI, certificateI_p256);
credentialManagerR.setCredentials(cryptoManagerR, certificateR_p256);
const method = index_1.EdhocMethod.Method3;
const initiator = new index_1.EDHOC(10, method, [index_1.EdhocSuite.Suite0], credentialManagerI, cryptoManagerI);
const responder = new index_1.EDHOC(20, method, [index_1.EdhocSuite.Suite0], credentialManagerR, cryptoManagerR);
// initiator.logger = (name, value) => console.log("INITIATOR", name, value.toString('hex'));
// responder.logger = (name, value) => console.log("RESPONDER", name, value.toString('hex'));
async function run() {
    try {
        let message_1 = await initiator.composeMessage1([{ label: 1, value: Buffer.from('Hello') }]);
        console.log("message_1", message_1.toString('hex'));
        let ead_1 = await responder.processMessage1(message_1);
        console.log("ead_1", ead_1);
        let message_2 = await responder.composeMessage2();
        console.log("message_2", message_2.toString('hex'));
        let ead_2 = await initiator.processMessage2(message_2);
        console.log("ead_2", ead_2);
        let message_3 = await initiator.composeMessage3();
        console.log("message_3", message_3.toString('hex'));
        let ead_3 = await responder.processMessage3(message_3);
        console.log("ead_3", ead_3);
        console.log("initiator", await initiator.exportOSCORE());
        console.log("responder", await responder.exportOSCORE());
    }
    catch (error) {
        console.log(error);
    }
}
run();
